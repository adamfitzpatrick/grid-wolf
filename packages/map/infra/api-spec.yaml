openapi: 3.0.0
info:
  title: Map data API for grid-wolf
  description: |-
    This API provides endpoints for updating and retrieving map data for users of grid-wolf.
  version: 0.1.0
paths:
  /map:
    options:
      security: []
      responses:
        '200':
          description: Enable CORS support
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "never"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
    put:
      description: Upload a new or replacement map data entry
      operationId: putMap
      security: 
        - apiKey: []
        - cognitoPool:
          - openid
      requestBody: 
        $ref: '#/components/requestBodies/PutMapRequest'
      responses:
        '200':
          description: Successful operation
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Bad request
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri: arn:aws:apigateway:{{region}}:lambda:path/2015-03-31/functions/{{handler}}/invocations
        httpMethod: POST
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
          method.response.header.Access-Control-Allow-Methods: "'*'"
          method.response.header.Access-Control-Allow-Origin: "'*'"
  /map/{mapId}:
    options:
      security: []
      responses:
        '200':
          description: Enable CORS support
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "never"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
    get:
      description: Retrieve an existing map data entry
      operationId: getMap
      security: 
        - apiKey: []
        - cognitoPool:
          - openid
      parameters: 
        - in: path
          name: mapId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Map'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri: arn:aws:apigateway:{{region}}:lambda:path/2015-03-31/functions/{{handler}}/invocations
        httpMethod: POST
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
          method.response.header.Access-Control-Allow-Methods: "'*'"
          method.response.header.Access-Control-Allow-Origin: "'*'"
  /map/save-image-url/{userId}/{filename}:
    options:
      security: []
      responses:
        '200':
          description: Enable CORS support
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "never"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
    get:
      description: Retrieve pre-signed S3 URL to upload a map image
      operationId: getMapSaveImageUrl
      security: 
        - apiKey: []
        - cognitoPool:
          - openid
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
        - in: path
          name: filename
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveImageUrl'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri: arn:aws:apigateway:{{region}}:lambda:path/2015-03-31/functions/{{handler}}/invocations
        httpMethod: POST
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
          method.response.header.Access-Control-Allow-Methods: "'*'"
          method.response.header.Access-Control-Allow-Origin: "'*'"
  /map/image-url/{userId}:
    options:
      security: []
      responses:
        '200':
          description: Enable CORS support
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "never"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
    get:
      description: Retrieve URL signing parameters for map image retrieval
      operationId: getMapImageUrl
      security: 
        - apiKey: []
        - cognitoPool:
          - openid
      parameters: 
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageUrlSigningParameters'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri: arn:aws:apigateway:{{region}}:lambda:path/2015-03-31/functions/{{handler}}/invocations
        httpMethod: POST
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
          method.response.header.Access-Control-Allow-Methods: "'*'"
          method.response.header.Access-Control-Allow-Origin: "'*'"
  /maps:
    options:
      security: []
      responses:
        '200':
          description: Enable CORS support
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "never"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
    get:
      description: Retrieve a list of all map data belonging to the authorized user
      operationId: getMaps
      security: 
        - apiKey: []
        - cognitoPool:
          - openid
      responses:
        '200':
          description: Successful operation
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponse'
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri: arn:aws:apigateway:{{region}}:lambda:path/2015-03-31/functions/{{handler}}/invocations
        httpMethod: POST
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
          method.response.header.Access-Control-Allow-Methods: "'*'"
          method.response.header.Access-Control-Allow-Origin: "'*'"
components:
  schemas:
    Map:
      type: object
      required:
        - id
        - userId
        - name
        - timestamp
      properties:
        id:
          type: string
        userId:
          type: string
        name:
          type: string
        timestamp:
          type: string
        imageFilename:
          type: string
    ImageUrlSigningParameters:
      type: object
      required:
        - userId
        - keyPairId
        - policy
        - signature
      properties:
        userId:
          type: string
        keyPairId:
          type: string
        policy:
          type: string
        signature:
          type: string
    SaveImageUrl:
      type: object
      required:
        - userId
        - filename
        - url
      properties:
        userId:
          type: string
        filename:
          type: string
        url:
          type: string
    ApiResponse:
      type: object
      properties:
        statusCode:
          type: integer
        message:
          type: string
  requestBodies:
    PutMapRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Map'
  securitySchemes:
    apiKey:
      type: apiKey
      name: x-api-key
      in: header
    cognitoPool:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        identitySource: Authorization
        authorizerResultTtlInSeconds: 300
        providerARNs:
          - {{authArn}}
