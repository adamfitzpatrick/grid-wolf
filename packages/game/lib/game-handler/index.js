"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = handler;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const domain_1 = require("@grid-wolf/shared/domain");
const utils_1 = require("@grid-wolf/shared/utils");
const jsonwebtoken_1 = require("jsonwebtoken");
const aws_xray_sdk_1 = require("aws-xray-sdk");
const client = (0, aws_xray_sdk_1.captureAWSv3Client)(new client_dynamodb_1.DynamoDBClient());
let TableName;
const parseAuthToken = (event) => {
    // Auth header is always present because requests are not accepted without it.
    const authHeader = event.headers.Authorization;
    const token = authHeader.replace(/^Bearer\s/, '');
    return (0, jsonwebtoken_1.decode)(token);
};
const handlePutGameOperation = async (event) => {
    console.debug({ operationHandled: 'putGame' });
    const gameDTO = JSON.parse(event.body);
    const { username } = parseAuthToken(event);
    if (username !== gameDTO.userId) {
        console.warn(`Username mismatch: auth user is ${username}, but request was for ${gameDTO.userId}`);
        return {
            statusCode: 400,
            body: 'bad request'
        };
    }
    const command = new client_dynamodb_1.PutItemCommand({
        TableName,
        Item: (0, domain_1.marshallToDAO)(gameDTO)
    });
    return client.send(command).then(() => ({
        statusCode: 202,
        body: 'accepted'
    }));
};
const handleGetGameOperation = async (event) => {
    console.debug({ operationHandled: 'getGame' });
    const gameId = event.pathParameters['gameId'];
    const { username } = parseAuthToken(event);
    const command = new client_dynamodb_1.GetItemCommand({
        TableName,
        Key: {
            pk: { S: `user#${username}` },
            sk: { S: `game#${gameId}` }
        }
    });
    const response = await client.send(command);
    if (!response.Item) {
        return {
            statusCode: 403,
            body: 'forbidden'
        };
    }
    return {
        statusCode: 200,
        body: JSON.stringify((0, domain_1.marshallToDTO)(response.Item))
    };
};
const handleGetGamesOperation = async (event) => {
    console.debug({ operationHandled: 'getGames' });
    const { username } = parseAuthToken(event);
    const command = new client_dynamodb_1.QueryCommand({
        TableName,
        ExpressionAttributeValues: {
            ':pk': { S: `user#${username}` }
        },
        KeyConditionExpression: 'pk = :pk'
    });
    const response = await client.send(command);
    return {
        statusCode: 200,
        body: JSON.stringify(response.Items.map(domain_1.marshallToDTO))
    };
};
async function handler(event) {
    console.info(JSON.stringify(event));
    TableName = process.env[utils_1.EnvironmentVariableName.DATA_TABLE_NAME];
    const { resourcePath, httpMethod } = event.requestContext;
    let returnValue = null;
    if (resourcePath === '/game' && httpMethod === 'PUT') {
        returnValue = await handlePutGameOperation(event);
    }
    else if (resourcePath === '/game/{gameId}' && httpMethod === 'GET') {
        returnValue = await handleGetGameOperation(event);
    }
    else if (resourcePath === '/games' && httpMethod === 'GET') {
        returnValue = await handleGetGamesOperation(event);
    }
    else {
        console.error(`No handler to invoke for path ${resourcePath} and method ${httpMethod}`);
    }
    console.debug({ returnValue });
    return returnValue;
}
//# sourceMappingURL=data:application/json;base64,