"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require(".");
const utils_1 = require("@grid-wolf/shared/utils");
let sendSpy;
let putCommandSpy;
let getCommandSpy;
let queryCommandSpy;
jest.mock('aws-xray-sdk', () => {
    return {
        captureAWSv3Client: (client) => client
    };
});
jest.mock('jsonwebtoken', () => {
    return {
        decode: (token) => ({ username: 'user' })
    };
});
jest.mock('@aws-sdk/client-dynamodb', () => {
    return {
        PutItemCommand: function (params) { return putCommandSpy(params); },
        GetItemCommand: function (params) { return getCommandSpy(params); },
        QueryCommand: function (params) { return queryCommandSpy(params); },
        DynamoDBClient: function () {
            return {
                send: (command) => sendSpy(command)
            };
        },
    };
});
describe('game handler', () => {
    let oldConsole;
    let Authorization;
    let gameDTO;
    let gameDAO;
    let event;
    beforeAll(() => {
        oldConsole = { ...console };
        console.warn = (message) => { };
    });
    beforeEach(() => {
        sendSpy = jest.fn().mockResolvedValue({});
        putCommandSpy = jest.fn().mockReturnValue({});
        getCommandSpy = jest.fn().mockReturnValue({});
        queryCommandSpy = jest.fn().mockReturnValue({});
        process.env[utils_1.EnvironmentVariableName.DATA_TABLE_NAME] = 'table';
        Authorization = `Bearer TOKEN`;
        gameDTO = {
            id: 'id',
            userId: 'user',
            name: 'name',
            timestamp: 1234
        };
        gameDAO = {
            pk: { S: 'user#user' },
            sk: { S: 'game#id' },
            id: { S: 'id' },
            userId: { S: 'user' },
            name: { S: 'name' },
            timestamp: { N: '1234' }
        };
        event = {
            body: JSON.stringify(gameDTO),
            requestContext: {
                httpMethod: 'GET',
                path: '/game'
            },
            headers: {
                Authorization
            }
        };
    });
    afterAll(() => {
        console.warn = oldConsole.warn;
    });
    test('/game PUT should save game data to dynamodb', async () => {
        event.requestContext.httpMethod = 'PUT';
        await expect((0, _1.handler)(event)).resolves.toEqual({
            statusCode: 202,
            message: 'accepted'
        });
        expect(putCommandSpy).toHaveBeenCalledWith({
            TableName: 'table',
            Item: gameDAO
        });
        expect(sendSpy).toHaveBeenCalledWith({});
    });
    test('/game PUT should return 401 if Authorized user does not match request body user', async () => {
        event.requestContext.httpMethod = 'PUT';
        gameDTO.userId = 'otherperson';
        event.body = JSON.stringify(gameDTO);
        expect(await (0, _1.handler)(event)).toEqual({
            statusCode: 400,
            message: 'bad request'
        });
        expect(putCommandSpy).not.toHaveBeenCalled();
        expect(sendSpy).not.toHaveBeenCalled();
    });
    test('/game/{gameId} GET should return data obtained from dynamodb', async () => {
        event.pathParameters = {
            gameId: 'id'
        };
        sendSpy.mockReturnValue({ Item: gameDAO });
        await expect((0, _1.handler)(event)).resolves.toEqual({
            statusCode: 200,
            body: JSON.stringify(gameDTO)
        });
        expect(getCommandSpy).toHaveBeenCalledWith({
            TableName: 'table',
            Key: {
                pk: { S: 'user#user' },
                sk: { S: 'game#id' }
            }
        });
        expect(sendSpy).toHaveBeenCalledWith({});
    });
    test('/games GET should return a list of game data for the user', async () => {
        event.requestContext.path = '/games';
        event.requestContext.httpMethod = 'GET';
        sendSpy.mockReturnValue({ Items: [gameDAO] });
        await expect((0, _1.handler)(event)).resolves.toEqual({
            statusCode: 200,
            body: JSON.stringify([gameDTO])
        });
        expect(queryCommandSpy).toHaveBeenCalledWith({
            TableName: 'table',
            ExpressionAttributeValues: {
                ':pk': { S: 'user#user' }
            },
            KeyConditionExpression: 'pk = :pk'
        });
        expect(sendSpy).toHaveBeenCalledWith({});
    });
});
//# sourceMappingURL=data:application/json;base64,